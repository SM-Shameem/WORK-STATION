===============================================================================
Getting Started Modules 
===============================================================================
01.	The subjects outlined in these modules are not web development topics, but 
    they are useful for anyone wanting to learn front-end web development to have 
    an understanding of
--  We don't consider learning these topics as required before moving on to the 
    core modules, hence we haven't used the word 'prerequisite'. 
--  However, we believe students will have an easier time if they spend some time 
    on these topics first - 
    a)	Soft Skills 
    b)	Environment Setup


---------------------------
Soft Skills
---------------------------
01.	This module provides recommendations of soft skills that students can aim to 
    get better at while learning web development, and which constitute good traits 
    to have when entering the industry
--	They will help immensely in developing the right attitudes for learning, 
    researching, and collaborating, and increase the chances of getting hired 
02.	Topics are listed below – 
    a)	Constant learning mindset 
    b)	Open to embracing failure 
    c)	Effective research 
    d)	Collaboration and teamwork 
    e)	Succeeding in job interviews 
    f)	Workflows and processes 
    g)	Relevant contextual information 


---------------------------
Environment Setup 
---------------------------
01.	This module includes topics related to the setup and usage of the computer 
    system that you will use to implement websites/apps 
--	These topics are not directly  related to creating web code, but you will 
    benefit greatly from understanding the operating system you are working with 
02. General resources - 
    >   Windows help and learning - Microsoft (2024)
    >   macOS User Guide - Apple (2024)
    >   Official Ubuntu documentation - ubuntu.com (2024)
03.	Topics are listed below – 
    a)	Computer basics 
    b)	File systems 
    c)	Browsing the web 
    d)	Command line basics 
    e)	Code editors 




===============================================================================
Getting Started Modules : Soft Skills
===============================================================================
01. Constant learning mindset 
02.	Open to embracing failure 
03.	Effective research 
04.	Collaboration and teamwork 
05.	Succeeding in job interviews 
06.	Workflows and processes 
07. Relevant contextual information 


-------------------------------------------------------------------------------
Constant Learning Mindset
-------------------------------------------------------------------------------
01.	Student should get into the mindset of constant learning 
--	The web is constantly evolving and technologies and trends are always 
    changing, and they need to constantly update their knowledge to keep up
    a)  Get into the habit of regularly reading technical news, blogs, browser 
        release notes 
    b)	Engage in reading tasks or small research projects semi-regularly 
    c)	Set aside specific learning time to spend on acquiring new skills 
    d)	Be curious 
03.	Recommended news and information sites
    > (MDN | CSS Tricks | Dev | freeCodeCamp | codeCademy) 


-------------------------------------------------------------------------------
Open to Embracing Failure
-------------------------------------------------------------------------------
01.	A very common issue that causes students and new developers to shy away 
    from experimentation and taking risks (for example when starting new projects 
    or exploring new ideas) is fear of failure
--	Spend some time learning about the value that can be gleaned from making 
    mistakes, and the lessons that can be learned and applied in the future in 
    similar situations 

02.	Here are some tips to improve this skill –
    a)	Define a safe space/peer group where people are free to ask questions 
        and failure will not be judged harshly 
    b)	Look to your local community and try to find meetup groups with people 
        who can either give you help and advice or are facing the same issues 
        you are and can provide moral support or experiment together with you 
    c)	(For educators) Set up the marking schemes for your assessments so that 
        you can still get a reasonable number of marks even if you didn’t get 
        the correct result provided the process is well documented. Award extra 
        marks for innovation 
    d)	Run show ‘n’ tell or one-on-one sessions part-way through a project with 
        peers and mentors to get feedback and insights into where you are going 
        wrong and get advice on how to get back on the right path 
    e)	Run retrospective meetings to analyze projects, look at what didn’t go so 
        well, and talk about how to improve things next time 


-------------------------------------------------------------------------------
Effective Research
-------------------------------------------------------------------------------
01.	Developers spend a lot of time searching for solutions to problems 
    encountered in work. 
--	Students should learn effective strategies for finding answers, and 
    where to use which methods (don’t’ jump straight to pestering the senior dev 
    every time you hit a roadblock)

02.	These strategies include – 
    a)	Consulting the documentation 
    #	When using a tool/product, consult the official documentation first.
    --	It is surprising how many people do not think to do this; official docs 
        are often geared towards beginners, so experience people may not think 
        of them as being suitable
    #	Learn about different types of documentation – for example, tutorials, 
        references, and other types – and understand when each type is useful 
    b)	Using search engines effectively 
    c)	Choosing valid information sources 
    #	Choose recommended sites such as (Stack Overflow and MDN)
    #	Consider whether the techniques discussed are out-of-date 
    --	Example, does an article on CSS talk about modern approaches like grid 
        and flexbox, or does it still present obsolete techniques like 
        multi-column layouts with floats
    --  Does it still talk about hacks for ancient browsers like internet 
        Explorer or Netscape4
    d)  Using social media effectively 
    #	Build a network of folks who can help 
    #   Join community groups where you can look for answers. 
    --  Example (MDN Web Docs Community on Discord | freeCodeCamp | CodeNewbie)
    #   Learn to give back as well as take; web developers who reciprocate are 
        much more likely to build strong relationships and keep getting help 
    #   When you find a useful answer, write about it
    --	Example, blog about it or share it on a social network
    --	Not only will the process of writing clarify the concepts to you, but 
        you’ll also get validation and/or feedback from the community 
    --  It could also help you to start making a name for yourself in the industry 
    e)  Making effective use of an experienced contact’s time 
    #   By ‘experienced contact’, we mean a teacher, mentor, or senior developer 
    #   Ask them what communication methods they prefer 
    #   Think, what questions to ask before, consider time limited and precious 
    #   Be sure to do some background research about the topic beforehand and 
        don’t ask questions that you can find answers to by searching web or 
        official documentation
    #   Time-box the session to say 30 minutes 
    #   Prioritize your issues 
    #   Set a goal for the session, for example, ‘try to find a solution to the 
        highest priority issue’; solving the biggest issue may also lead to a 
        fix for other issues  
    f)  Rubber ducking as an effective help mechanism 
    g)  Using AI to help with coding issues (ChatGPT or Copilot). You should 
        use AI tools with caution, and familiarize yourself with their strengths 
        and weakness 
    #   On the plus side, they can speed up research/searches enormously, and 
        help with structuring code and copy 
    #   On the other hand, AI tools have no reasoning skills and frequently 
        provide answers that are misleading or just plain wrong. 
    --  Shouldn’t assume, AI answers are correct, and test with other sources 
    h)  Notes -
    #   There is definitely a balance to knowing the right time to ask for help. 
    --  Developers shouldn’t constantly pester their peers/colleagues, equally, 
        they shouldn’t soldier on and pretend they know what they are doing when 
        they don’t 
    #   Consider the value of saying ‘I don’t know’ at the right time  

03. Resources - Learning and getting help 


-------------------------------------------------------------------------------
Collaboration and Teamwork
-------------------------------------------------------------------------------
01.	As a professional in the web industry, you are going to have to work with 
    other people on projects, and while brainstorming ideas and proposals 
--	Not everyone is born with an innate ability to work in a term, so it is 
    beneficial to start incorporating some best practices early on and putting 
    work into areas where you think you are lacking 

02.	Recommendations – 
    a)	Learn about empathy, humility, conflict resolution, and cooperation. 
    --  In engagements, stay polite, respectful and do not use offensive language 
    b)	While working in team in real world, will frequently be expected to do 
        peer reviews. 
    --  Practice how to deliver feedback constructively and respectfully. 
    --  When receiving feedback, practice how to not take it personally, and 
        focus on the positives and what you can learn.
    c)	Participate in pair programming, or work in teams on assessments to 
        experience working with other people 
    d)	Practice running a real software project, with a timeline, plan, and 
        responsibilities.
    --  Learn about the software development lifecycle.
    --  Pick up some basic project planning skills and tools to be able to 
        estimate and plane your work/project 
    e)  As part of the course, blog about your work, learnings, and roadblocks, 
        share your code repositories, get peers to critique your work, and offer 
        updates to fix issues in other people’s work 
    f)  Join a slack channel, discord, or a similar space, ask peers for help, 
        share resources, and discuss the work to be done (for example, Frontend 
        Developers Discord Server)
    g)  Practice asking and answering questions. 
    --  Even if they seem somewhat trivial, always come up with one or two 
        questions to ask when discussing or reviewing peer work.
    --  It is essential to practice explaining what you are doing and asking 
        the right questions to find out what you need to know.
    h)	Help each other, rather than waiting for a teacher or senior to go around.
    --  Less able peers will get help more quickly, and mere able peers will 
        become mentors and experience the satisfaction that it brings 
    i)	Observe and learn from other experienced folks how be engage in 
        discussions as well as how to approach problem-solving/debugging 
    j)	Join an open-source project to practice the skills you learn, engage 
        with folks in the community, and learn from observing others 
    --  (See, How to Contribute to Open Source Project – 
        A Beginner’s Guide, for useful info)


-------------------------------------------------------------------------------
Succeeding in Job Interviews
-------------------------------------------------------------------------------
01. Technical job interviews can be very demanding, and some have quite specific 
    requirements 

02.	Recommendation – 
    a)	Learn effective strategies for job searching. For example – 
    #   Attend networking events and job fairs to meet potential employers 
    #   Keep an inventory of the people you meet and the companies you apply to
    #   Follow up with any promising leads you meet 
    b)  Create a portfolio 
    c)  Build the perfect resume
    d)	Get experience – build real projects and contribute to open source 
    e)  Build your online persona 
    f)  Use sites like LinkedIn to help with the above 
    g)  Practice writing answers for coding and design interview questions 
    h)  Build anecdotes collection for experience – based interview questions 
    i)  Be aware of the attributes that hiring managers look for in a candidate 
        and prepare accordingly – 
    #   Someone they can get along with 
    #   Positive attitude, respectful, empathic, constructive 
    #   Open-minded and works well in a diverse team with diverse viewpoints 
    #   Graceful when decision does not their way, able to align for greater good 
    #   Good communicator and relationship builder 
    #   Tenacious, focused, good problem solver 
    #   Having a good portfolio
    j)  Be patient. Even the best candidates will get rejections from multiple job 
        applications before they land the job they want 

03. Resources – 
    >	Technical Interviewing 101: Ultimate Guide to Acing Your Tech Interview 
    >	30 Technical Interview Questions and Tips for Answering 


-------------------------------------------------------------------------------
Workflows and Processes
-------------------------------------------------------------------------------
01.	An important aspect of technical projects that beginners often miss out on 
    is an ideal of the bigger picture of a project 
-- They might learn an individual tool or language and understand what they 
    need to do, but be unaware of all the other code-bases, tools, systems, and 
    job roles that go together to deliver an entire web application 
-- It is useful to understand the following at a high level – 
    a)  Typical technology combinations and architectures in common projects
    b)  Typical processes for a technical project, including where different 
        tools are used in those processes 
    c)  Typical job roles, and where they are involved in those processes 
    d)  Common work management styles, such as agile and waterfall 

02. Resources – 
    >   What is a Tech Stack and How Do They Work 
    >   Website development team structure: roles and processes 
    >   Waterfall vs. Agile vs. Kanban vs. Scrum: What’s the difference 


-------------------------------------------------------------------------------
Relevant Contextual Information
-------------------------------------------------------------------------------
01.	While not essential for understanding the technical topics listed in the 
    curriculum, there is a range of contextual information that can help 
    developers gain a well-rounded and flexible perspective. 

02. Recommendations – 
    a)  To understand why things are the way they are, study the relevant 
        historical context. For example – 
    #   Why was the web designed like it is in terms of data delivery when 
        arguably faster mechanisms exist 
    #   Why does the web use a document model with links as a central feature
        when these days it is largely used to build apps 
    #   Why are web standards created like they are, in collaboration, when the 
        process isn’t necessarily as efficient as it could be? 
    b)  Study general programming concepts where relevant, for example – 
    #   The purpose of objects, and what they enable in terms of the design of 
        a language like JavaScript and its surrounding APIs 
    #   How loops work and why they are needed 
